End to End Machine Lerning Project 

                                                      DAY 1

>A] How to create Environment:
 
0) Check python extension is instlled or not in VS Code, if not availble then search & install it  
1) Open Anaconda prompt 
2) conda create -n <Environment name> python=3.8
3) conda activate <Environment name>
4) pip install numpy pandas matplotlib seaborn scikit-learn
5) pip install PyYAML
6) pip install Flask
7) pip install Flask-Cors
8) pip install python-box==6.0.2
9) pip install types-PyYAML
10)pip install -e .
11)In VS CODE :
   Open Command Palette (ctrl + shift + P) >> Python select Interpreter >> Select Environment or if it is not available add from explorer path
12)Open new Terminal & verify selected environment is activated or not.

>B] How to set up Git repository in VS Code 

1) Create repository on Github 
2) Clone repository to local >> git clone <URL> 
3) select repository folder / directory from my files to open VS code with Git 

   *B.1] kernel: To run the Jupyter Notboon in the VS code for selected environment 
    pip install ipykernel
	to access the libraries from same env rather than base env    
	python -m ipykernel install --user --name E2EML --display-name "Python (E2EML)"
	
>c] How to create project template:

1) Create template.py file in VS code 

1.1) In template.py file paste below code 
 
   import os
   
   from pathlib import Path #COMMENT:- Using pathlib's Path class provides a more readable and convenient way to work with file paths in Python code compared to traditional string manipulation.
   
   import logging           
   
   logging.basicConfig(level=logging.INFO, format='[%(asctime)s]: %(message)s:')
   
   project_name = <Project name> 
   
   list_of_files = [
    f"src/{project_name}/__init__.py",
    f"src/{project_name}/components/__init__.py",
    f"src/{project_name}/utils/__init__.py",
    f"src/{project_name}/utils/common.py",
    f"src/{project_name}/config/__init__.py",
    f"src/{project_name}/config/configuration.py",
    f"src/{project_name}/pipeline/__init__.py",
    f"src/{project_name}/entity/__init__.py",
    f"src/{project_name}/entity/config_entity.py",
    f"src/{project_name}/constants/__init__.py",
    "config/config.yaml",
    "params.yaml",
    "schema.yaml",
    "main.py",
    "app.py",
    "requirements.txt",
    "setup.py",
    "research/trials.ipynb",
    "templates/index.html"


]

for filepath in list_of_files:
    filepath = Path(filepath)

    filedir, filename = os.path.split(filepath)

    if filedir !="":
        os.makedirs(filedir, exist_ok=True)
        logging.info(f"Creating directory; {filedir} for the file: {filename}")

    if (not os.path.exists(filepath)) or (os.path.getsize(filepath) == 0):
        with open(filepath, "w") as f:
            pass
            logging.info(f"Creating empty file: {filepath}")


    else:
        logging.info(f"{filename} is already exists")
		
1.2) Automaticaly below file are created under Project folder  
    f"src/{project_name}/__init__.py",
    f"src/{project_name}/components/__init__.py",
    f"src/{project_name}/utils/__init__.py",
    f"src/{project_name}/utils/common.py",
    f"src/{project_name}/config/__init__.py",
    f"src/{project_name}/config/configuration.py",
    f"src/{project_name}/pipeline/__init__.py",
    f"src/{project_name}/entity/__init__.py",
    f"src/{project_name}/entity/config_entity.py",
    f"src/{project_name}/constants/__init__.py",
    "config/config.yaml",
    "params.yaml",
    "schema.yaml",
    "main.py",
    "app.py",
    "requirements.txt",
    "setup.py",
    "research/trials.ipynb",
    "templates/index.html" 	

2) Opened setup.py file in VS code

2.1) In setup.py file paste below code 	

import setuptools

with open("README.md", "r", encoding="utf-8") as f:
    long_description = f.read()


__version__ = "0.0.0" # Project version

REPO_NAME = "End-to-end-ML-Project"
AUTHOR_USER_NAME = "Samadhan262728"
SRC_REPO = "mlProject"
AUTHOR_EMAIL = "samadhan.pisal.2828@gmail.com"


setuptools.setup(
    name=SRC_REPO,
    version=__version__,
    author=AUTHOR_USER_NAME,
    author_email=AUTHOR_EMAIL,
    description="A small python package for ml app",
    long_description=long_description,
    long_description_content="text/markdown",
    url=f"https://github.com/{AUTHOR_USER_NAME}/{REPO_NAME}",
    project_urls={
        "Bug Tracker": f"https://github.com/{AUTHOR_USER_NAME}/{REPO_NAME}/issues",
    },
    package_dir={"": "src"},
    packages=setuptools.find_packages(where="src")
)

                                                   OR 
										if we missed step number A		   

1) conda create -n <Environment name> python=3.8 -y 
2) conda activate <Environment name>
3) Opened requirements.txt file in VS code
   3.1) In requirements.txt file paste required Libraries like 
        pandas 
        notebook
        numpy
        scikit-learn
        matplotlib
        python-box==6.0.2
        pyYAML
        ensure==1.0.2
        joblib
        types-PyYAML
        Flask
        Flask-Cors
        -e .
3) Run command pip install -r requirements.txt in command prompt in folder path with project environment
4) python app.py -> need to check 
5) Now open up your local host 0.0.0.0:8080	-> need to check

                                                       DAY 2
>A) Notebook Experiment 
    -> Here you are required to create a new notebook within the research folder and upload your dataset to the same folder. 
	-> then you need to develop your machine learning model and implement it on your dataset in a newly created notebook & find the accuracy.  
	
>B) Project utility -> Logging, Exception & utils Module
    B.1] Logging :- 
	    1-> Here you are required to create one <logging> folder under src/mlproject folder
		2-> then you need to create a new file __init__.py under <logging> folder
		3-> Reference Logging Code : you need to write this code in <__init__.py> file

import os
import sys
import logging

logging_str = "[%(asctime)s: %(levelname)s: %(module)s: %(message)s]" #COMMENT:- This line defines a format string for the log messages. It specifies the format in which the log messages will be displayed. The format includes the timestamp (%(asctime)s), log level (%(levelname)s), module name (%(module)s), and the log message itself (%(message)s).

log_dir = "logs" #Comment:- This line defines the directory where log files will be stored.

log_filepath = os.path.join(log_dir, "running_log.log") #COMMENT:- This line creates the full path to the log file (running_log.log) within the specified log directory.
os.makedirs(log_dir, exist_ok=True) #COMMENT:- This line creates the log directory if it does not already exist. The exist_ok=True argument ensures that the function does not raise an error if the directory already exists.


logging.basicConfig(
    level = logging.INFO,
    format = logging_str,

    handlers=[
        logging.FileHandler(log_filepath), #COMMENT:- This handler directs log messages to the specified log file (running_log.log).
        logging.StreamHandler(sys.stdout)  #COMMENT:- This handler directs log messages to the standard output (stdout), which typically means they will be displayed in the console.
    ]
)

logger = logging.getLogger("mlProjectLogger") #COMMENT:- This line creates a logger object named "mlProjectLogger". Log messages will be logged using this logger object.

        4-> You are required to compose fresh code within the main.py file in order to evaluate the effectiveness of our logging system. 
        5-> Reference checking Code : you need to write below code in <main.py> file

from src.mlproject.logging import logger 
logger.info("This is our Custome log!")

        6-> Please check in the terminal, How the functionality of our logging system works 	
    
	B.3] utils Module :-
	    If a function is used regularly in a Project, it is referred to as a utility function.  
	    1-> here we need to create one file <common.py> under Utils folder 
		2-> In common.py we used below listed function 
		    2.1-> read_yaml(path_to_yaml: Path) -> ConfigBox                 #COMMENT:- This function reads a YAML file from the given path and returns its contents as a ConfigBox object. It logs a message if the file is loaded successfully and raises a ValueError if the YAML file is empty.
			2.2-> create_directories(path_to_directories: list, verbose=True)#COMMENT:- This function creates directories specified in the list path_to_directories. It uses os.makedirs() to create directories recursively. It also logs a message for each directory created. The verbose parameter controls whether to log messages or not.
			2.3-> save_json(path: Path, data: dict)                          #COMMENT:- This function saves JSON data to a file specified by path. It uses json.dump() to serialize the data to the file in JSON format. It also logs a message after saving the file.
            2.4->load_json(path: Path) -> ConfigBox                          #COMMENT:- This function loads JSON data from a file specified by path and returns it as a ConfigBox object. It logs a message if the file is loaded successfully.
            2.5->save_bin(data: Any, path: Path)                             #COMMENT:- This function saves binary data to a file specified by path. It uses joblib.dump() to serialize the data to the file in binary format. It also logs a message after saving the file.
            2.6->load_bin(path: Path) -> Any                                 #COMMENT:- This function loads binary data from a file specified by path and returns it. It uses joblib.load() to deserialize the data from the file. It logs a message if the file is loaded successfully.
            2.7->get_size(path: Path) -> str                                 #COMMENT:- This function returns the size of the file specified by path in kilobytes (KB). It uses os.path.getsize() to get the size of the file and converts it to KB. The size is returned as a string with an approximate value followed by "KB".
	  
Utils Common.py Code 

import os
from box.exceptions import BoxValueError
import yaml
from mlproject import logger
import json
import joblib
from ensure import ensure_annotations
from box import ConfigBox #
from pathlib import Path
from typing import Any



@ensure_annotations
def read_yaml(path_to_yaml: Path) -> ConfigBox:
    """reads yaml file and returns

    Args:
        path_to_yaml (str): path like input

    Raises:
        ValueError: if yaml file is empty
        e: empty file

    Returns:
        ConfigBox: ConfigBox type
    """
    try:
        with open(path_to_yaml) as yaml_file:
            content = yaml.safe_load(yaml_file)
            logger.info(f"yaml file: {path_to_yaml} loaded successfully")
            return ConfigBox(content)
    except BoxValueError:
        raise ValueError("yaml file is empty")
    except Exception as e:
        raise e
    


@ensure_annotations
def create_directories(path_to_directories: list, verbose=True):
    """create list of directories

    Args:
        path_to_directories (list): list of path of directories
        ignore_log (bool, optional): ignore if multiple dirs is to be created. Defaults to False.
    """
    for path in path_to_directories:
        os.makedirs(path, exist_ok=True)
        if verbose:
            logger.info(f"created directory at: {path}")


@ensure_annotations
def save_json(path: Path, data: dict):
    """save json data

    Args:
        path (Path): path to json file
        data (dict): data to be saved in json file
    """
    with open(path, "w") as f:
        json.dump(data, f, indent=4)

    logger.info(f"json file saved at: {path}")




@ensure_annotations
def load_json(path: Path) -> ConfigBox:
    """load json files data

    Args:
        path (Path): path to json file

    Returns:
        ConfigBox: data as class attributes instead of dict
    """
    with open(path) as f:
        content = json.load(f)

    logger.info(f"json file loaded succesfully from: {path}")
    return ConfigBox(content)


@ensure_annotations
def save_bin(data: Any, path: Path):
    """save binary file

    Args:
        data (Any): data to be saved as binary
        path (Path): path to binary file
    """
    joblib.dump(value=data, filename=path)
    logger.info(f"binary file saved at: {path}")


@ensure_annotations
def load_bin(path: Path) -> Any:
    """load binary data

    Args:
        path (Path): path to binary file

    Returns:
        Any: object stored in the file
    """
    data = joblib.load(path)
    logger.info(f"binary file loaded from: {path}")
    return data



@ensure_annotations
def get_size(path: Path) -> str:
    """get size in KB

    Args:
        path (Path): path of the file

    Returns:
        str: size in KB
    """
    size_in_kb = round(os.path.getsize(path)/1024)
    return f"~ {size_in_kb} KB"	  
	  
	
>C) Project Workflow

update config.yaml
update schema.yaml
update params.yaml
update the entity
update the configuration manager in src config
update the components
update the pipeline
update the main.py
update the app.py 												   
