End to End Machine Lerning Project 

                                                      DAY 1

>A] How to create Environment:
 
0) Check python extension is instlled or not in VS Code, if not availble then search & install it  
1) Open Anaconda prompt 
2) conda create -n <Environment name> python=3.8
3) conda activate <Environment name>
4) pip install numpy pandas matplotlib seaborn scikit-learn
5) pip install PyYAML
6) pip install Flask
7) pip install Flask-Cors
8) pip install python-box==6.0.2
9) pip install types-PyYAML
10)pip install -e .
11)In VS CODE :
   Open Command Palette (ctrl + shift + P) >> Python select Interpreter >> Select Environment or if it is not available add from explorer path
12)Open new Terminal & verify selected environment is activated or not.

>B] How to set up Git repository in VS Code 

1) Create repository on Github 
2) Clone repository to local >> git clone <URL> 
3) select repository folder / directory from my files to open VS code with Git 

   *B.1] kernel: To run the Jupyter Notboon in the VS code for selected environment 
    pip install ipykernel
	to access the libraries from same env rather than base env    
	python -m ipykernel install --user --name E2EML --display-name "Python (E2EML)"
	
>c] How to create project template:

1) Create template.py file in VS code 

1.1) In template.py file paste below code 
 
   import os
   from pathlib import Path
   import logging             #What is logging ?
   logging.basicConfig(level=logging.INFO, format='[%(asctime)s]: %(message)s:')
   project_name = <Project name> 
   list_of_files = [
    f"src/{project_name}/__init__.py",
    f"src/{project_name}/components/__init__.py",
    f"src/{project_name}/utils/__init__.py",
    f"src/{project_name}/utils/common.py",
    f"src/{project_name}/config/__init__.py",
    f"src/{project_name}/config/configuration.py",
    f"src/{project_name}/pipeline/__init__.py",
    f"src/{project_name}/entity/__init__.py",
    f"src/{project_name}/entity/config_entity.py",
    f"src/{project_name}/constants/__init__.py",
    "config/config.yaml",
    "params.yaml",
    "schema.yaml",
    "main.py",
    "app.py",
    "requirements.txt",
    "setup.py",
    "research/trials.ipynb",
    "templates/index.html"


]

for filepath in list_of_files:
    filepath = Path(filepath)

    filedir, filename = os.path.split(filepath)

    if filedir !="":
        os.makedirs(filedir, exist_ok=True)
        logging.info(f"Creating directory; {filedir} for the file: {filename}")

    if (not os.path.exists(filepath)) or (os.path.getsize(filepath) == 0):
        with open(filepath, "w") as f:
            pass
            logging.info(f"Creating empty file: {filepath}")


    else:
        logging.info(f"{filename} is already exists")
		
1.2) Automaticaly below file are created under Project folder  
    f"src/{project_name}/__init__.py",
    f"src/{project_name}/components/__init__.py",
    f"src/{project_name}/utils/__init__.py",
    f"src/{project_name}/utils/common.py",
    f"src/{project_name}/config/__init__.py",
    f"src/{project_name}/config/configuration.py",
    f"src/{project_name}/pipeline/__init__.py",
    f"src/{project_name}/entity/__init__.py",
    f"src/{project_name}/entity/config_entity.py",
    f"src/{project_name}/constants/__init__.py",
    "config/config.yaml",
    "params.yaml",
    "schema.yaml",
    "main.py",
    "app.py",
    "requirements.txt",
    "setup.py",
    "research/trials.ipynb",
    "templates/index.html" 	

2) Opened setup.py file in VS code

2.1) In setup.py file paste below code 	

import setuptools

with open("README.md", "r", encoding="utf-8") as f:
    long_description = f.read()


__version__ = "0.0.0" # Project version

REPO_NAME = "End-to-end-ML-Project"
AUTHOR_USER_NAME = "Samadhan262728"
SRC_REPO = "mlProject"
AUTHOR_EMAIL = "samadhan.pisal.2828@gmail.com"


setuptools.setup(
    name=SRC_REPO,
    version=__version__,
    author=AUTHOR_USER_NAME,
    author_email=AUTHOR_EMAIL,
    description="A small python package for ml app",
    long_description=long_description,
    long_description_content="text/markdown",
    url=f"https://github.com/{AUTHOR_USER_NAME}/{REPO_NAME}",
    project_urls={
        "Bug Tracker": f"https://github.com/{AUTHOR_USER_NAME}/{REPO_NAME}/issues",
    },
    package_dir={"": "src"},
    packages=setuptools.find_packages(where="src")
)

                                                   OR 
										if we missed step number A		   

1) conda create -n <Environment name> python=3.8 -y 
2) conda activate <Environment name>
3) Opened requirements.txt file in VS code
   3.1) In requirements.txt file paste required Libraries like 
        pandas 
        notebook
        numpy
        scikit-learn
        matplotlib
        python-box==6.0.2
        pyYAML
        ensure==1.0.2
        joblib
        types-PyYAML
        Flask
        Flask-Cors
        -e .
3) Run command pip install -r requirements.txt in command prompt in folder path with project environment
4) python app.py -> need to check 
5) Now open up your local host 0.0.0.0:8080	-> need to check

                                                       DAY 2
>A) Notebook Experiment 
    -> Here you are required to create a new notebook within the research folder and upload your dataset to the same folder. 
	-> then you need to develop your machine learning model and implement it on your dataset in a newly created notebook & find the accuracy.  
	
>B) Project utility -> Logging, Exception & utils Module
    B.1] Logging :- 
	    1-> Here you are required to create one <logging> folder under src/mlproject folder
		2-> then you need to create a new file __init__.py under <logging> folder
		3-> Reference Logging Code : you need to write this code in <__init__.py> file

import os
import sys
import logging

logging_str = "[%(asctime)s: %(levelname)s: %(module)s: %(message)s]" #COMMENT:- This line defines a format string for the log messages. It specifies the format in which the log messages will be displayed. The format includes the timestamp (%(asctime)s), log level (%(levelname)s), module name (%(module)s), and the log message itself (%(message)s).

log_dir = "logs" #Comment:- This line defines the directory where log files will be stored.

log_filepath = os.path.join(log_dir, "running_log.log") #COMMENT:- This line creates the full path to the log file (running_log.log) within the specified log directory.
os.makedirs(log_dir, exist_ok=True) #COMMENT:- This line creates the log directory if it does not already exist. The exist_ok=True argument ensures that the function does not raise an error if the directory already exists.


logging.basicConfig(
    level = logging.INFO,
    format = logging_str,

    handlers=[
        logging.FileHandler(log_filepath), #COMMENT:- This handler directs log messages to the specified log file (running_log.log).
        logging.StreamHandler(sys.stdout)  #COMMENT:- This handler directs log messages to the standard output (stdout), which typically means they will be displayed in the console.
    ]
)

logger = logging.getLogger("mlProjectLogger") #COMMENT:- This line creates a logger object named "mlProjectLogger". Log messages will be logged using this logger object.

        4-> You are required to compose fresh code within the main.py file in order to evaluate the effectiveness of our logging system. 
        5-> Reference checking Code : you need to write below code in <main.py> file

from src.mlproject.logging import logger 
logger.info("This is our Custome log!")

        6-> Please check in the terminal, How the functionality of our logging system works 	
    
>C) Project Workflow 												   
