End to End Machine Lerning Project 

*A] How to create Environment:
 
0) Check python extension is instlled or not in VS Code, if not availble then search & install it  
1) Open Anaconda prompt 
2) conda create -n <Environment name> python=3.8
3) conda activate <Environment name>
4) pip install numpy pandas matplotlib seaborn scikit-learn
5) pip install PyYAML
6) pip install Flask
7) pip install Flask-Cors
8) In VS CODE :
   Open Command Palette (ctrl + shift + P) >> Python select Interpreter >> Select Environment or if it is not available add from explorer path
9) Open new Terminal & verify selected environment is activated or not.

*B] How to set up Git repository in VS Code 

1) Create repository on Github 
2) Clone repository to local >> git clone <URL> 
3) select repository folder / directory from my files to open VS code with Git 

*C] kernel: To run the Jupyter Notboon in the VS code for selected environment 

pip install ipykernel
	to access the libraries from same env rather than base env    
	python -m ipykernel install --user --name E2EML --display-name "Python (E2EML)"
	
*D] How to create project template:

1) Create template.py file in VS code 
2) In that file import : 
   import os
   from pathlib import Path
   import logging             #What is logging ?
   logging.basicConfig(level=logging.INFO, format='[%(asctime)s]: %(message)s:')
   project_name = "mlProject" 
   list_of_files = [
    f"src/{project_name}/__init__.py",
    f"src/{project_name}/components/__init__.py",
    f"src/{project_name}/utils/__init__.py",
    f"src/{project_name}/utils/common.py",
    f"src/{project_name}/config/__init__.py",
    f"src/{project_name}/config/configuration.py",
    f"src/{project_name}/pipeline/__init__.py",
    f"src/{project_name}/entity/__init__.py",
    f"src/{project_name}/entity/config_entity.py",
    f"src/{project_name}/constants/__init__.py",
    "config/config.yaml",
    "params.yaml",
    "schema.yaml",
    "main.py",
    "app.py",
    "requirements.txt",
    "setup.py",
    "research/trials.ipynb",
    "templates/index.html"


]

for filepath in list_of_files:
    filepath = Path(filepath)

    filedir, filename = os.path.split(filepath)

    if filedir !="":
        os.makedirs(filedir, exist_ok=True)
        logging.info(f"Creating directory; {filedir} for the file: {filename}")

    if (not os.path.exists(filepath)) or (os.path.getsize(filepath) == 0):
        with open(filepath, "w") as f:
            pass
            logging.info(f"Creating empty file: {filepath}")


    else:
        logging.info(f"{filename} is already exists")
